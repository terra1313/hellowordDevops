name: C++ CI

on: [push]

jobs:name: C++ CI

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        compiler: [gcc, clang, msvc]

    container:
      image: ${{ matrix.os == 'ubuntu-latest' ? 'ubuntu:latest' : 'mcr.microsoft.com/windows/servercore:ltsc2019' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up SSH Keys for Submodule Repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_SUBMODULE_AI_OMNISCOPE_V2 }}

      - name: Initialize Submodules
        run: git submodule update --init --recursive

      - name: Set Up C++ Environment
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ matrix.os == 'windows-latest' }}
          cmake: true

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt-get update
          apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

      - name: Set Up Prerequisites (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          apt-get update
          apt-get install -y autoconf libudev-dev

      - name: Set Up MSVC Dev Command Prompt (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: CMake Configure
        run: cmake -S . -B ./build -DCMAKE_BUILD_TYPE="Release"

      - name: Build
        run: cmake --build ./build ${{ matrix.os == 'windows-latest' ? '--config Release' : '' }}

      - name: Upload Executable
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'windows-latest' }}: build/Release/OmniView.exe
            ${{ matrix.os == 'ubuntu-latest' }}: build/OmniView

  build:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows
          - os: ubuntu-latest
            triplet: x64-linux

    steps:
      - uses: actions/checkout@v3

      - name: add ssh private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: |
             ${{ secrets.SSH_KEY_SUBMODULE_AI_OMNISCOPE_V2 }}

      - name: checkout submodules
        run: git submodule update --init --recursive

      - name: setup
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}
          cmake: true

      - name: install deps
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ !contains(matrix.os, 'windows' ) }}
        with:
          packages: libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
          version: 1.0

      - name: setup prerequisites
        if: ${{ !contains(matrix.os, 'windows' ) }}
        shell: bash
        run: |
          sudo apt update
          sudo apt install autoconf libudev-dev

      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: CMake configure
        if: ${{ !contains(matrix.os, 'windows' ) }}
        run: cmake -S . -B ./build -DCMAKE_BUILD_TYPE="Release"

      - name: build
        if: ${{ !contains(matrix.os, 'windows' ) }}
        run: cmake --build ./build

      - name: CMake configure
        if: ${{ contains(matrix.os, 'windows' ) }}
        run: cmake -S . -B ./build -DVCPKG_TARGET_TRIPLET="x64-windows-static"

      - name: build
        if: ${{ contains(matrix.os, 'windows' ) }}
        run: cmake --build ./build --config Release

      - name: upload executable (Linux)
        uses: actions/upload-artifact@v3
        if: ${{ !contains(matrix.os, 'windows' ) }}
        with:
          name: executable-linux
          path: build/OmniView

      - name: upload executable (Windows)
        uses: actions/upload-artifact@v3
        if: ${{ contains(matrix.os, 'windows' ) }}
        with:
          name: executable-windows
          path: build/Release/OmniView.exe


